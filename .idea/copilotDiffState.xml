<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/backend/max_pool.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/max_pool.py" />
              <option name="originalContent" value="import numpy as np&#10;&#10;def max_pool(image, pool_size=2, stride=2):&#10;    img_height, img_width, channels = image.shape&#10;    out_height = (img_height - pool_size) // stride + 1&#10;    out_width = (img_width - pool_size) // stride + 1&#10;    pooled = np.zeros((out_height, out_width, channels))&#10;&#10;    for c in range(channels):&#10;        for i in range(out_height):&#10;            for j in range(out_width):&#10;                h_start = i * stride&#10;                w_start = j * stride&#10;                window = image[h_start:h_start+pool_size, w_start:w_start+pool_size, c]&#10;                pooled[i, j, c] = np.max(window)&#10;    return pooled" />
              <option name="updatedContent" value="import numpy as np&#10;from numpy.lib.stride_tricks import as_strided&#10;&#10;def max_pool(image, pool_size=2, stride=2):&#10;    img_height, img_width, channels = image.shape&#10;    out_height = (img_height - pool_size) // stride + 1&#10;    out_width = (img_width - pool_size) // stride + 1&#10;&#10;    # Create a view of the image with sliding windows&#10;    view_shape = (out_height, out_width, channels, pool_size, pool_size)&#10;    &#10;    # Calculate strides for the view&#10;    # Stride for height, width, channels, then inside the pool window&#10;    strides = (&#10;        stride * image.strides[0], &#10;        stride * image.strides[1], &#10;        image.strides[2], &#10;        image.strides[0], &#10;        image.strides[1]&#10;    )&#10;    &#10;    windows = as_strided(image, shape=view_shape, strides=strides)&#10;&#10;    # Find the maximum value in each window across the pool_size x pool_size dimensions&#10;    # The axes to reduce are the last two (pool_height and pool_width)&#10;    pooled = np.max(windows, axis=(3, 4))&#10;    &#10;    return pooled" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/templates/index.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/index.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Image Classifier - Home&lt;/title&gt;&#10;    {% include 'links.html' %}&#10;&lt;/head&gt;&#10;    &lt;body&gt;&#10;        {% include 'header.html' %}&#10;&#10;        &lt;main&gt;&#10;            &lt;div class=&quot;main-content&quot;&gt;&#10;                {% if message %}&#10;                    &lt;div class=&quot;alert-message&quot;&gt;{{ message }}&lt;/div&gt;&#10;                {% endif %}&#10;                &lt;p&gt;This is a simple image classifier I made from scratch (without importing any artificial intelligence packages) as a small project. You can try it out by uploading some images below to train the model and then test it's classification skills.&lt;/p&gt;&#10;&#10;                &lt;form class=&quot;upload-form&quot; action=&quot;/upload&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&gt;&#10;                    &lt;div class=&quot;form-row&quot;&gt;&#10;                        &lt;div style=&quot;flex:1&quot;&gt;&#10;                            &lt;label for=&quot;zipfile&quot;&gt;Upload a zip file of images for dataset one:&lt;/label&gt;&#10;                            &lt;input type=&quot;file&quot; id=&quot;zipfile&quot; name=&quot;zipfile&quot; accept=&quot;.zip,.tar.gz,.tar.xz&quot; required&gt;&#10;                            &lt;input type=&quot;text&quot; name=&quot;dataset1_name&quot; placeholder=&quot;Dataset one name&quot; required&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div style=&quot;flex:1&quot;&gt;&#10;                            &lt;label for=&quot;zipfile2&quot;&gt;Upload a zip file of images for dataset two:&lt;/label&gt;&#10;                            &lt;input type=&quot;file&quot; id=&quot;zipfile2&quot; name=&quot;zipfile2&quot; accept=&quot;.zip,.tar.gz,.tar.xz&quot; required&gt;&#10;                            &lt;input type=&quot;text&quot; name=&quot;dataset2_name&quot; placeholder=&quot;Dataset two name&quot; required&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div style=&quot;margin-top: 18px; text-align: center;&quot;&gt;&#10;                        &lt;button type=&quot;submit&quot; onclick=&quot;trainButtonClicked()&quot; style=&quot;width: 75%&quot;&gt;Upload&lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/form&gt;&#10;&#10;                &lt;div style=&quot;text-align: center;&quot;&gt;&#10;                    {{ trainbutton|safe }}&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/main&gt;&#10;    &lt;/body&gt;&#10;&lt;/html&gt;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Image Classifier - Home&lt;/title&gt;&#10;    {% include 'links.html' %}&#10;&lt;/head&gt;&#10;    &lt;body&gt;&#10;        {% include 'header.html' %}&#10;&#10;        &lt;main&gt;&#10;            &lt;div class=&quot;main-content&quot;&gt;&#10;                {% if message %}&#10;                    &lt;div class=&quot;alert-message&quot;&gt;{{ message }}&lt;/div&gt;&#10;                {% endif %}&#10;                &lt;p&gt;This is a simple image classifier I made from scratch (without importing any artificial intelligence packages) as a small project. You can try it out by uploading some images below to train the model and then test it's classification skills.&lt;/p&gt;&#10;&#10;                &lt;form class=&quot;upload-form&quot; action=&quot;/upload&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&gt;&#10;                    &lt;div class=&quot;form-row&quot;&gt;&#10;                        &lt;div style=&quot;flex:1&quot;&gt;&#10;                            &lt;label for=&quot;zipfile&quot;&gt;Upload a zip file of images for dataset one:&lt;/label&gt;&#10;                            &lt;input type=&quot;file&quot; id=&quot;zipfile&quot; name=&quot;zipfile&quot; accept=&quot;.zip,.tar.gz,.tar.xz&quot; required&gt;&#10;                            &lt;input type=&quot;text&quot; name=&quot;dataset1_name&quot; placeholder=&quot;Dataset one name&quot; required class=&quot;text-input-spacing&quot;&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div style=&quot;flex:1&quot;&gt;&#10;                            &lt;label for=&quot;zipfile2&quot;&gt;Upload a zip file of images for dataset two:&lt;/label&gt;&#10;                            &lt;input type=&quot;file&quot; id=&quot;zipfile2&quot; name=&quot;zipfile2&quot; accept=&quot;.zip,.tar.gz,.tar.xz&quot; required&gt;&#10;                            &lt;input type=&quot;text&quot; name=&quot;dataset2_name&quot; placeholder=&quot;Dataset two name&quot; required class=&quot;text-input-spacing&quot;&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div style=&quot;margin-top: 18px; text-align: center;&quot;&gt;&#10;                        &lt;button type=&quot;submit&quot; onclick=&quot;trainButtonClicked()&quot; style=&quot;width: 75%&quot;&gt;Upload&lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/form&gt;&#10;&#10;                &lt;div style=&quot;text-align: center;&quot;&gt;&#10;                    {{ trainbutton|safe }}&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/main&gt;&#10;    &lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>